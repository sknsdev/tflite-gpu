#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–∞—Ä—Ç
"""

import os
import json
import numpy as np
try:
    # –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π LiteRT API
    from ai_edge_litert.interpreter import Interpreter
    USING_LITERT = True
except ImportError:
    # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–π TensorFlow Lite API
    import tensorflow as tf
    from tensorflow.lite.python.interpreter import Interpreter
    USING_LITERT = False

from PIL import Image, ImageDraw, ImageFont
import random
import sys

class CardRecognitionDemo:
    def __init__(self, model_path="/app/card_recognition_model.tflite", 
                 class_names_path="/app/class_names.json"):
        self.model_path = model_path
        self.class_names_path = class_names_path
        self.interpreter = None
        self.class_names = []
        self.input_details = None
        self.output_details = None
        
        self.load_model()
        self.load_class_names()
    
    def load_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ TensorFlow Lite –º–æ–¥–µ–ª–∏"""
        if not os.path.exists(self.model_path):
            print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.model_path}")
            print("–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å: python train_model.py")
            return False
            
        self.interpreter = Interpreter(model_path=self.model_path)
        self.interpreter.allocate_tensors()
        
        self.input_details = self.interpreter.get_input_details()
        self.output_details = self.interpreter.get_output_details()
        
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {self.model_path}")
        model_size = os.path.getsize(self.model_path) / 1024 / 1024
        print(f"üìä –†–∞–∑–º–µ—Ä –º–æ–¥–µ–ª–∏: {model_size:.2f} MB")
        return True
    
    def load_class_names(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–ª–∞—Å—Å–æ–≤"""
        if not os.path.exists(self.class_names_path):
            print(f"‚ùå –§–∞–π–ª –∫–ª–∞—Å—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {self.class_names_path}")
            return False
            
        with open(self.class_names_path, 'r', encoding='utf-8') as f:
            self.class_names = json.load(f)
            
        print(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.class_names)} –∫–ª–∞—Å—Å–æ–≤ –∫–∞—Ä—Ç")
        return True
    
    def preprocess_image(self, image_path):
        """–ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –º–æ–¥–µ–ª–∏"""
        try:
            img = Image.open(image_path).convert('RGB')
            original_size = img.size
            
            # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è –º–æ–¥–µ–ª–∏
            img_resized = img.resize((224, 224))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –≤—Ö–æ–¥–Ω–æ–≥–æ —Ç–µ–Ω–∑–æ—Ä–∞
            input_dtype = self.input_details[0]['dtype']
            
            if input_dtype == np.uint8:
                # –î–ª—è UINT8 –º–æ–¥–µ–ª–∏ - –±–µ–∑ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
                img_array = np.array(img_resized, dtype=np.uint8)
            else:
                # –î–ª—è FLOAT32 –º–æ–¥–µ–ª–∏ - —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π
                img_array = np.array(img_resized, dtype=np.float32) / 255.0
            
            img_array = np.expand_dims(img_array, axis=0)
            
            return img_array, img, original_size
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")
            return None, None, None
    
    def predict_card(self, image_path, top_k=3):
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –∫–∞—Ä—Ç—ã"""
        if self.interpreter is None:
            print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return None
            
        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
        img_array, original_img, original_size = self.preprocess_image(image_path)
        if img_array is None:
            return None
        
        # –ò–Ω—Ñ–µ—Ä–µ–Ω—Å
        self.interpreter.set_tensor(self.input_details[0]['index'], img_array)
        self.interpreter.invoke()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        output_data = self.interpreter.get_tensor(self.output_details[0]['index'])
        predictions = output_data[0]
        
        # –¢–æ–ø-K –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
        top_indices = np.argsort(predictions)[-top_k:][::-1]
        
        results = []
        for idx in top_indices:
            confidence = predictions[idx]
            class_name = self.class_names[idx] if idx < len(self.class_names) else f"class_{idx}"
            results.append({
                'class': class_name,
                'confidence': float(confidence),
                'percentage': float(confidence * 100)
            })
        
        return {
            'predictions': results,
            'image_path': image_path,
            'original_image': original_img,
            'original_size': original_size
        }
    
    def parse_card_name(self, class_name):
        """–†–∞–∑–±–æ—Ä –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ä—Ç—ã –Ω–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã"""
        parts = class_name.split('_')
        if len(parts) >= 3:
            return {
                'set': parts[0],
                'number': parts[1], 
                'type': parts[2]
            }
        return {'set': 'unknown', 'number': 'unknown', 'type': 'unknown'}
    
    def format_prediction_text(self, prediction):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
        card_info = self.parse_card_name(prediction['class'])
        
        type_names = {
            'normal': '–û–±—ã—á–Ω–∞—è',
            'alt': '–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è', 
            'pf': '–ü–æ–ª–Ω–æ—Ñ–æ—Ä–º–∞—Ç–Ω–∞—è'
        }
        
        type_display = type_names.get(card_info['type'], card_info['type'])
        
        return f"""–°–µ—Ç: {card_info['set'].upper()}
–ö–∞—Ä—Ç–∞: #{card_info['number']}
–¢–∏–ø: {type_display}
–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {prediction['percentage']:.1f}%"""
    
    def demo_random_cards(self, cards_dir="/app/cards", num_cards=5):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–∞—Ä—Ç–∞—Ö"""
        print(f"\nüéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–∞ {num_cards} —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–∞—Ä—Ç–∞—Ö\n")
        
        # –°–±–æ—Ä –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        all_images = []
        for root, dirs, files in os.walk(cards_dir):
            for file in files:
                if file.endswith('.webp'):
                    all_images.append(os.path.join(root, file))
        
        if len(all_images) == 0:
            print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ")
            return
        
        # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä
        random.seed(42)
        selected_images = random.sample(all_images, min(num_cards, len(all_images)))
        
        correct_predictions = 0
        
        for i, img_path in enumerate(selected_images, 1):
            print(f"\n{'='*60}")
            print(f"üîç –¢–µ—Å—Ç {i}/{len(selected_images)}: {os.path.basename(img_path)}")
            print(f"{'='*60}")
            
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
            true_class = self.extract_true_class(img_path)
            print(f"üìã –ò—Å—Ç–∏–Ω–Ω—ã–π –∫–ª–∞—Å—Å: {true_class}")
            
            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            result = self.predict_card(img_path)
            if result:
                predictions = result['predictions']
                
                print(f"\nü§ñ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏:")
                for j, pred in enumerate(predictions, 1):
                    marker = "üéØ" if j == 1 else "üìä"
                    print(f"  {marker} {j}. {pred['class']} ({pred['percentage']:.1f}%)")
                    if j == 1:
                        print(f"      {self.format_prediction_text(pred).replace(chr(10), chr(10) + '      ')}")
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏
                if predictions[0]['class'] == true_class:
                    print(f"\n‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û! –ú–æ–¥–µ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∞ –∫–∞—Ä—Ç—É")
                    correct_predictions += 1
                else:
                    print(f"\n‚ùå –û–®–ò–ë–ö–ê. –û–∂–∏–¥–∞–ª–æ—Å—å: {true_class}")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        accuracy = (correct_predictions / len(selected_images)) * 100
        print(f"\n{'='*60}")
        print(f"üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print(f"{'='*60}")
        print(f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {correct_predictions}/{len(selected_images)}")
        print(f"–¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1f}%")
        
        if accuracy >= 90:
            print("üèÜ –û—Ç–ª–∏—á–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å!")
        elif accuracy >= 70:
            print("üëç –•–æ—Ä–æ—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å")
        else:
            print("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ")
    
    def extract_true_class(self, img_path):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏—Å—Ç–∏–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∏–∑ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É"""
        path_parts = img_path.replace('\\', '/').split('/')
        set_name = path_parts[-3]
        card_folder = path_parts[-2]
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–∞—Ä—Ç—ã
        card_type = "normal"
        if "_alt" in card_folder:
            card_type = "alt"
            card_number = card_folder.replace("_alt", "")
        elif "_pf" in card_folder:
            card_type = "pf"
            card_number = card_folder.replace("_pf", "")
        else:
            card_number = card_folder
        
        return f"{set_name}_{card_number}_{card_type}"
    
    def predict_single_image(self, image_path):
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_path}")
        print(f"{'='*60}")
        
        if not os.path.exists(image_path):
            print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}")
            return
        
        result = self.predict_card(image_path)
        if result:
            predictions = result['predictions']
            
            print(f"\nü§ñ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:")
            for i, pred in enumerate(predictions, 1):
                marker = "üéØ" if i == 1 else "üìä"
                print(f"\n{marker} –í–∞—Ä–∏–∞–Ω—Ç {i}:")
                print(f"   –ö–ª–∞—Å—Å: {pred['class']}")
                print(f"   {self.format_prediction_text(pred).replace(chr(10), chr(10) + '   ')}")
            
            # –õ—É—á—à–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            best = predictions[0]
            print(f"\nüèÜ –õ—É—á—à–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {best['class']} ({best['percentage']:.1f}%)")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéÆ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–∞—Ä—Ç")
    print("="*50)
    
    demo = CardRecognitionDemo()
    
    if demo.interpreter is None or len(demo.class_names) == 0:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –∏–ª–∏ –∫–ª–∞—Å—Å—ã")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –º–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞: python train_model.py")
        return 1
    
    if len(sys.argv) > 1:
        # –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_path = sys.argv[1]
        demo.predict_single_image(image_path)
    else:
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–∞—Ä—Ç–∞—Ö
        demo.demo_random_cards()
    
    print("\n‚ú® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    return 0

if __name__ == "__main__":
    sys.exit(main())