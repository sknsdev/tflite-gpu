#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ GPU –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ TensorFlow
"""

import tensorflow as tf
import os

def check_gpu_availability():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ GPU"""
    print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU ===")
    print(f"TensorFlow –≤–µ—Ä—Å–∏—è: {tf.__version__}")
    print(f"–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ CUDA: {tf.test.is_built_with_cuda()}")
    
    # –°–ø–∏—Å–æ–∫ —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    physical_devices = tf.config.list_physical_devices()
    print(f"\n–í—Å–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {len(physical_devices)}")
    for device in physical_devices:
        print(f"  - {device}")
    
    # GPU —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    gpu_devices = tf.config.list_physical_devices('GPU')
    print(f"\nGPU —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {len(gpu_devices)}")
    for i, gpu in enumerate(gpu_devices):
        print(f"  GPU {i}: {gpu}")
        
        # –î–µ—Ç–∞–ª–∏ GPU
        try:
            gpu_details = tf.config.experimental.get_device_details(gpu)
            print(f"    –î–µ—Ç–∞–ª–∏: {gpu_details}")
        except:
            print("    –î–µ—Ç–∞–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ CUDA
    print(f"\nCUDA –¥–æ—Å—Ç—É–ø–Ω–∞: {tf.test.is_gpu_available()}")
    
    if len(gpu_devices) > 0:
        print("\n‚úì GPU –Ω–∞–π–¥–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—Å—Ç–∞ –ø–∞–º—è—Ç–∏
        try:
            for gpu in gpu_devices:
                tf.config.experimental.set_memory_growth(gpu, True)
            print("‚úì –ù–∞—Å—Ç—Ä–æ–µ–Ω —Ä–æ—Å—Ç –ø–∞–º—è—Ç–∏ GPU")
        except Exception as e:
            print(f"‚ö† –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞–º—è—Ç–∏ GPU: {e}")
            
    else:
        print("\n‚ö† GPU –Ω–µ –Ω–∞–π–¥–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è CPU")
    
    return len(gpu_devices) > 0

def test_gpu_computation():
    """–¢–µ—Å—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –Ω–∞ GPU"""
    print("\n=== –¢–µ—Å—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–π ===")
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–Ω–∑–æ—Ä–æ–≤
        with tf.device('/GPU:0' if tf.config.list_physical_devices('GPU') else '/CPU:0'):
            a = tf.random.normal([1000, 1000])
            b = tf.random.normal([1000, 1000])
            
            # –ú–∞—Ç—Ä–∏—á–Ω–æ–µ —É–º–Ω–æ–∂–µ–Ω–∏–µ
            c = tf.matmul(a, b)
            
        device_name = c.device
        print(f"–í—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –Ω–∞: {device_name}")
        print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: —Ç–µ–Ω–∑–æ—Ä —Ä–∞–∑–º–µ—Ä–æ–º {c.shape}")
        print("‚úì –¢–µ—Å—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

def check_dataset():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
    print("\n=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ ===")
    
    cards_dir = "/app/cards"
    if not os.path.exists(cards_dir):
        print(f"‚ö† –ü–∞–ø–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {cards_dir}")
        return False
    
    total_images = 0
    sets_count = 0
    cards_count = 0
    
    for set_name in os.listdir(cards_dir):
        set_path = os.path.join(cards_dir, set_name)
        if not os.path.isdir(set_path):
            continue
            
        sets_count += 1
        set_images = 0
        set_cards = 0
        
        for card_folder in os.listdir(set_path):
            card_path = os.path.join(set_path, card_folder)
            if not os.path.isdir(card_path):
                continue
                
            set_cards += 1
            cards_count += 1
            
            # –ü–æ–¥—Å—á–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ –∫–∞—Ä—Ç—ã
            card_images = len([f for f in os.listdir(card_path) if f.endswith('.webp')])
            set_images += card_images
            total_images += card_images
        
        print(f"–°–µ—Ç '{set_name}': {set_cards} –∫–∞—Ä—Ç, {set_images} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    
    print(f"\n–ò—Ç–æ–≥–æ:")
    print(f"  –°–µ—Ç—ã: {sets_count}")
    print(f"  –ö–∞—Ä—Ç—ã: {cards_count}")
    print(f"  –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {total_images}")
    
    if total_images > 0:
        print("‚úì –î–∞—Ç–∞—Å–µ—Ç –Ω–∞–π–¥–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        return True
    else:
        print("‚ö† –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –¥–∞—Ç–∞—Å–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∫–∞—Ä—Ç\n")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU
    gpu_available = check_gpu_availability()
    
    # –¢–µ—Å—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    test_gpu_computation()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞
    dataset_ready = check_dataset()
    
    print("\n=== –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å ===")
    print(f"GPU –¥–æ—Å—Ç—É–ø–µ–Ω: {'‚úì' if gpu_available else '‚úó'}")
    print(f"–î–∞—Ç–∞—Å–µ—Ç –≥–æ—Ç–æ–≤: {'‚úì' if dataset_ready else '‚úó'}")
    
    if gpu_available and dataset_ready:
        print("\nüöÄ –í—Å–µ –≥–æ—Ç–æ–≤–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏!")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python train_model.py")
    else:
        print("\n‚ö† –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        if not gpu_available:
            print("  - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É CUDA –∏ –¥—Ä–∞–π–≤–µ—Ä–æ–≤ GPU")
        if not dataset_ready:
            print("  - –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∞–ø–∫–∞ cards —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

if __name__ == "__main__":
    main()